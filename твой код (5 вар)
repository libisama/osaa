#include <string.h> 
#include <locale>
#include <iostream>
#include <Windows.h>
#include <string> 
#include <fstream> 

using namespace std;

//структура Фамилия И.О. 
struct Fio {
	string surname,
		name, patronymic;
};


//структура данных
struct Data {
	Fio _fio;
	int _gradebook_number;
	int _group_number;
	string _faculty;
};

//шаблоны функций
void Copy(Data* (&d_n), Data* (&d_o), int n)
{
	for (int i = 0; i < n; i++)
	{
		d_n[i] = d_o[i];
	}
}

void Copy(Data& d_n, Data& d_o)
{
	d_n._fio.surname = d_o._fio.surname;
	d_n._fio.name = d_o._fio.name;
	d_n._fio.patronymic = d_o._fio.patronymic;

	d_n._gradebook_number = d_o._gradebook_number;
	d_n._group_number = d_o._group_number;
	d_n._faculty = d_o._faculty;

}



void DataEntry(Data* (&d), int& n)
{
	cout << "Введите количество данных: ";
	cin >> n;

	//выделим память
	d = new Data[n];

	for (int i = 0; i < n; i++) {
		cout << "Введите ФИО: ";
		cin >> d[i]._fio.surname >> d[i]._fio.name >> d[i]._fio.patronymic;

		cout << "Введите номер зачетной книжки: ";
		cin >> d[i]._gradebook_number;

		cout << "Введите номер группы: ";
		cin >> d[i]._group_number;

		cout << "Введите факультет: ";
		cin >> d[i]._faculty;

		cout << "____________________________" << endl;
	}
}

void DataAdd(Data* (&d), int& n)
{
	//временный массив данных
	Data* buf;

	buf = new Data[n];

	//сохраняем данные в временный массив
	Copy(buf, d, n);

	//выделяем новую память
	n++;
	d = new Data[n];

	//возвращаем данные
	Copy(d, buf, --n);

	cout << "Введите ФИО: ";
	cin >> d[n]._fio.surname >> d[n]._fio.name >> d[n]._fio.patronymic;

	cout << "Введите номер зачетной книжки: ";
	cin >> d[n]._gradebook_number;

	cout << "Введите номер группы: ";
	cin >> d[n]._group_number;

	cout << "Введите факультет: ";
	cin >> d[n]._faculty;

	cout << endl << "Данные добавлены!" << endl;

	delete[]buf;
}

void DataClear(Data* d, int n)
{
	int _n;
	cout << "Введите номер элемента (от 1 до " << n << "): ";
	cin >> _n;
	_n--; //убавляем на единицу т.к. индекс = 0

	if (_n >= 0 && _n < n) {
		d[_n]._fio.surname = d[_n]._fio.name = d[_n]._fio.patronymic = "0";
		d[_n]._gradebook_number = 0;
		d[_n]._group_number = 0;
		d[_n]._faculty = "0";
	}
	else {
		cout << "Номер введен неверно!";
	}
}

void FindFreeData(Data* (&d), int& n)
{
	for (int i = 0; i < n; i++) {
		if (d[i]._fio.surname == "0") { //будет достаточно фамилии, тк обнуляется все
			cout << "Пустоле поле с индексом: " << i + 1 << endl;
			break;
		}
		if (i == n) {
			cout << "Структуры заполнены" << endl;
		}
	}
}

void PrintStructure(Data* d, int n)
{
	int _n;
	cout << "Введите номер элемента (от 1 до " << n << "): ";
	cin >> _n;
	_n--; //убавляем на единицу т.к. индекс = 0

	if (_n >= 0 && _n < n) {
		cout << "ФИО: " << d[_n]._fio.surname << " " << d[_n]._fio.name << " " << d[_n]._fio.patronymic << endl;
		cout << "Номер зачетной книжки: " << d[_n]._gradebook_number << endl;
		cout << "Номер группы: " << d[_n]._group_number << endl;
		cout << "Факультет: " << d[_n]._faculty << endl;

	}
	else {
		cout << "Номер введен неверно!";
	}
}

void PrintData(Data* d, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << "ФИО: " << d[i]._fio.surname << " " << d[i]._fio.name << " " << d[i]._fio.patronymic << endl;
		cout << "Номер зачетной книжки: " << d[i]._gradebook_number << endl;
		cout << "Номер группы: " << d[i]._group_number << endl;
		cout << "Факультет: " << d[i]._faculty << endl;
		cout << "___________________________" << endl;
	}
}

float SearchDataString(string S1, string S2)
{
	float match = 0;
	double N;
	if (strlen(S1.c_str()) >= strlen(S2.c_str()))
	{
		for (int i = 0; i < strlen(S2.c_str()); i++)
		{
			if (S1[i] == S2[i])
				match++;
		}
		N = match / strlen(S2.c_str()); //доля схожести от всех букв слова из базы
	}
	else {
		for (int i = 0; i < strlen(S1.c_str()); i++) {
			if (S1[i] == S2[i])
				match++;
		}
		N = match / strlen(S2.c_str()); //доля схожести от всех букв слова из базы
	}
	return (N * 100); //процент совпадения
}

void SearchMinData(Data* (&d), int& n)
{
	int column_number = 0; int j = 0;

	cout << "Выберите номер поля: 1 - ФИО, 2 - Номер счета, 3 - Сумма счета, 4 - Дата: "; cin >> column_number;
	switch (column_number)
	{
	case 1:
		for (int i = 1; i < n; i++)
			if (d[j]._fio.surname > d[i]._fio.surname && d[i]._fio.surname != "0")
				j = i;
		for (int i = 1; i < n; i++)
			if (d[j]._fio.name > d[i]._fio.name && d[i]._fio.name != "0")
				j = i;
		for (int i = 1; i < n; i++)
			if (d[j]._fio.patronymic > d[i]._fio.patronymic && d[i]._fio.patronymic != "0")
				j = i;
		break;
	case 2:
		for (int i = 1; i < n; i++)
			if (d[j]._gradebook_number > d[i]._gradebook_number && d[i]._gradebook_number != 0)
				j = i;
		break;
	case 3:
		for (int i = 1; i < n; i++)
			if (d[j]._group_number > d[i]._group_number && d[i]._group_number != 0)
				j = i;
		break;
	case 4:
		for (int i = 1; i < n; i++)
			if (d[j]._faculty != "0")
				j = i;
		break;
	}
	cout << "Номер минимального поля: " << j + 1 << endl;
}

void DataSortUp(Data* d, int n)
{
	//временная переменная
	Data buf;

	//сортировка методом пузырька
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			//условие сортировки
			if (d[i]._fio.surname < d[j]._fio.surname) {
				Copy(buf, d[j]);
				Copy(d[j], d[i]);
				Copy(d[i], buf);
			}
		}
	}
	cout << "Данные отсортированы!" << endl;
}

void DataSortDown(Data* d, int n)
{
	//временная переменная
	Data buf;

	//сортировка методом пузырька
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			//условие сортировки
			if (d[i]._fio.surname > d[j]._fio.surname) {
				Copy(buf, d[j]);
				Copy(d[j], d[i]);
				Copy(d[i], buf);
			}
		}
	}
	cout << "Данные отсортированы!" << endl;
}

void ReadingData(Data* (&d), int& n, string file_name)
{
	//создаем поток для чтения 
	ifstream reading(file_name);

	if (reading) {
		reading >> n;

		//выделим память
		d = new Data[n];

		for (int i = 0; i < n; i++) {
			reading >> d[i]._fio.surname >> d[i]._fio.name >> d[i]._fio.patronymic;
			reading >> d[i]._gradebook_number;
			reading >> d[i]._group_number;
			reading >> d[i]._faculty;
		}
	}
	cout << "Данные считаны!" << endl;
}

void SavingData(Data* d, int n, string file_name)
{
	//создается поток для записи
	ofstream record(file_name, ios::out);

	if (record) {
		record << n << endl;

		for (int i = 0; i < n; i++)
		{
			record << d[i]._fio.surname << endl;
			record << d[i]._fio.name << endl;
			record << d[i]._fio.patronymic << endl;

			record << d[i]._gradebook_number << endl;

			record << d[i]._group_number << endl;

			record << d[i]._faculty << endl;

		}
	}
	else
		cout << "Ошибка открытия файла" << endl;
	record.close();
}



int _state_menu;
void Menu() {
	cout << "Выберите ввод структуры вручную(12) или чтение с файла(10): " << endl
		<< "(0) Выход из программы" << endl
		<< "(1) Очистка элемента структуры" << endl
		<< "(2) Поиск свободной структуры" << endl
		<< "(3) Ввод элемента с клавиатуры" << endl
		<< "(4) Вывод элементов на монитор" << endl
		<< "(5) Вывод всей структуры на монитор" << endl
		<< "(6) Поиск в массиве структур элемента с заданным значением поля" << endl
		<< "(7) Поиск в массиве структуры с минимальным значением заданного поля" <<
		endl

		<< "(8) Сортировка по возрастанию" << endl
		<< "(9) Сортировка по убыванию" << endl
		<< "(10) Чтение файла" << endl
		<< "(11) Запись в файл" << endl
		<< "(12) Ввод вручную" << endl
		<< "Ваш выбор: ";
	cin >> _state_menu;
}

int main() {
	//русификация консоли 
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	setlocale(LC_ALL, "Rus");

	int amount_of_data = 0;
	string file_name;

	string key_word;
	double key_number;
	float procent, procent_max = 0;
	int j;
	int number_or_not;
	int min, max = 0;
	int equivalent = 0;

	Data* d = new Data[amount_of_data];

	Menu();

	while (_state_menu != 0)
	{
		switch (_state_menu)
		{
		case 1:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				DataClear(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 2:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				FindFreeData(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 3:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				DataAdd(d, amount_of_data);
			}
			else
				amount_of_data++;

			cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 4:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				PrintStructure(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 5:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				PrintData(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 6:
			system("cls"); //очистка консоли
			equivalent = 0;
			if (amount_of_data != 0) {
				cout << "Введите 1 для поиска по числовому значению и 2 для поиска по строковому : ";
				cin >> number_or_not;
				switch (number_or_not)
				{
				case 2:
					cin >> key_word;
					for (int i = 0; i < amount_of_data; i++)
					{
						procent = SearchDataString(key_word, d[i]._fio.surname);

						if (procent > procent_max) {
							procent_max = procent; j = i;
							cout << "Самое близкое поле: " << j + 1 << ": " << d[j]._fio.surname << endl;
							cout << "Процент совпадения : " << procent_max << " % " << endl;
							break;

						}
					}
					break;
				case 1:
					cin >> key_number;
					for (int i = 0; i < amount_of_data; i++)
					{
						if ((d[i]._gradebook_number < key_number) && (d[i]._gradebook_number > max))
							max = d[i]._gradebook_number;
					}

					min = 100000;
					for (int i = 0; i < amount_of_data; i++)
					{
						if ((d[i]._gradebook_number > key_number) && (d[i]._gradebook_number < max))
							min = d[i]._gradebook_number;
					}
					for (int i = 0; i < amount_of_data; i++)
					{
						if (d[i]._gradebook_number == key_number)
							equivalent = d[i]._gradebook_number;
					}
					if (equivalent != 0)
					{
						cout << "Равное значение: " << equivalent << endl;
					}
					else
					{
						cout << "Самое близкое значение: ";

						if (abs(key_number - max) < abs(key_number - min))
							cout << max << endl;
						else
							cout << min << endl;
					}
					break;
				}
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 7:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				SearchMinData(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 8:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				DataSortUp(d, amount_of_data);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 9:
			system("cls"); //очистка консоли
			if (amount_of_data != 0) {
				DataSortDown(d, amount_of_data);
			}
			else

				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 10:
			system("cls"); //очистка консоли
			ReadingData(d, amount_of_data, "Input.txt");;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 11:
			system("cls"); //очистка консоли

			cout << "Введите название файла: ";
			cin >> file_name;
			if (amount_of_data != 0) {
				SavingData(d, amount_of_data, file_name);
			}
			else
				cout << "Данные пусты!" << endl;

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		case 12:
			system("cls"); //очистка консоли
			DataEntry(d, amount_of_data);

			system("pause"); //задержка консоли 
			system("cls"); //очистка консоли 
			Menu();
			break;
		default:
			cout << "Неверно введен номер действия!" << endl;

			system("cls"); //очистка консоли
			Menu(); break;
		}
	}
}
